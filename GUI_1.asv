function varargout = GUI_1(varargin)
% GUI_1 MATLAB code for GUI_1.fig
%      GUI_1, by itself, creates a new GUI_1 or raises the existing
%      singleton*.
%
%      H = GUI_1 returns the handle to a new GUI_1 or the handle to
%      the existing singleton*.
%
%      GUI_1('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_1.M with the given input arguments.
%
%      GUI_1('Property','Value',...) creates a new GUI_1 or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GUI_1_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_1_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GUI_1

% Last Modified by GUIDE v2.5 19-Sep-2015 14:09:14

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GUI_1_OpeningFcn, ...
                   'gui_OutputFcn',  @GUI_1_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before GUI_1 is made visible.
function GUI_1_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI_1 (see VARARGIN)

% Choose default command line output for GUI_1
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes GUI_1 wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GUI_1_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in load_image.
function load_image_Callback(hObject, eventdata, handles)
% hObject    handle to load_image (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

axes(handles.axes1);
x = imgetfile();
[handles.file_pwd,handles.file_name,handles.file_extension] = fileparts(x);
%if ~(handles.file_extension == '.png');
%    set(handles.output_display, 'string', 'File format not supported');
    imshow(x);
    handles.filename = x;
    guidata(hObject, handles);
%end

% --- Executes on button press in gray_scale_image.
function gray_scale_image_Callback(hObject, eventdata, handles)
% hObject    handle to gray_scale_image (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
x = imread(handles.filename);
gray_x = rgb2gray(x);
imshow(gray_x);

% --- Executes on button press in binary_image.
function binary_image_Callback(hObject, eventdata, handles)
% hObject    handle to binary_image (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
gray_scale_image_Callback(hObject, eventdata, handles);
gray_x = getimage();

threshold = Otsu(gray_x);
BW = im2bw(gray_x, threshold);
set(handles.output_display, 'string', strcat('THRESHOLD VALUE: ', num2str(threshold)));

input_image = xor(1,BW);
imshow(input_image);

%--------------- DISPLAY HISTOGRAM OF BINARY IMAGE -------------

hist_params = Hist_Params(input_image);

axes(handles.axes3);
hist(hist_params,1:length(input_image(1,:)));
axes(handles.axes1);

[handles.image_height, handles.image_width] = size(input_image);
guidata(hObject, handles);

% --- Executes on button press in skew_correction.
function skew_correction_Callback(hObject, eventdata, handles)
% hObject    handle to skew_correction (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

binary_image_Callback(hObject, eventdata, handles);
input_image = getimage();
slope = Skew_Correction(input_image);
rotated_image = imrotate(input_image, atand(slope));
set(handles.output_display, 'string', strcat('Image Slope Value: ', num2str(slope)));
hold off;
imshow(rotated_image);

% --- Executes on button press in slant_correction.
function slant_correction_Callback(hObject, eventdata, handles)
% hObject    handle to slant_correction (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

input_image = getimage();
slant_angle = Slant_Correction(input_image);

T = maketform('affine', [1 0 0; slant_angle 1 0; 0 0 1] );
transformed_image = imtransform(input_image,T, 'FillValues', 0);

imshow(transformed_image);

set(handles.output_display, 'string', strcat('Image Slant Value: ', num2str(slant_angle)));


% --- Executes on button press in line_segmentation.
function line_segmentation_Callback(hObject, eventdata, handles)
% hObject    handle to line_segmentation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

    imshow(getimage());
    input_image = getimage();
    [image_height,image_width] = size(input_image);
    [segmentation_points] = Line_Segmentation(input_image);
    imshow(input_image);
    
    for l = 1 : length(segmentation_points)
        line([1,image_width],[segmentation_points(l),segmentation_points(l)]);
    end
    
    number_of_line_segments = floor(length(segmentation_points)/2);
    
    spc = 1;
    for line_number = 1 : number_of_line_segments;
    z = input_image(segmentation_points(spc): segmentation_points(spc+1), 1:image_width);
    imwrite(z, strcat(handles.file_pwd, '\segments\', 'line_', int2str(line_number), '_', handles.file_name, handles.file_extension));
    spc = spc+2;
    end

    set(handles.output_display, 'string', strcat('NUMBER OF LINE SEGMENTS: ', num2str(number_of_line_segments)));
    handles.number_of_line_segments = number_of_line_segments;
    handles.line_segmentation_points = segmentation_points;
    guidata(hObject, handles);

% --- Executes on button press in word_segmentation.
function word_segmentation_Callback(hObject, eventdata, handles)
% hObject    handle to word_segmentation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

line_segmentation_Callback(hObject, eventdata, handles);
line_segmentation_points = handles.line_segmentation_points;

line_top = 1;
line_bottom = 2;
total_words = 0;

FILE_PWD = handles.file_pwd;
FILE_NAME = handles.file_name;
FILE_EXTENSION = handles.file_extension;
NUMBER_OF_LINE_SEGMENTS = handles.number_of_line_segments;
NUMBER_OF_WORD_SEGMENTS = 0;


overall_segmentation_points = [];
osp = 1;
for segment_number = 1 : NUMBER_OF_LINE_SEGMENTS
    input_path = strcat(FILE_PWD, '\segments\', 'line_', int2str(segment_number), '_', FILE_NAME, FILE_EXTENSION);
    if exist(input_path) == 0
        break;
    else
        input_image = imread(input_path);
        [segmentation_points] = Word_Segmentation(input_image');

        for w = 1 : length(segmentation_points)
            line([segmentation_points(w), segmentation_points(w)],[line_segmentation_points(line_top),line_segmentation_points(line_bottom)]);
        end
        
        number_of_word_segments = floor(length(segmentation_points)/2);
        NUMBER_OF_WORD_SEGMENTS = NUMBER_OF_WORD_SEGMENTS + number_of_word_segments;

        spc = 1;
        for n = 1 : number_of_word_segments;
            z = input_image(: , segmentation_points(spc): segmentation_points(spc+1));
            imwrite(z, strcat(FILE_PWD, '\segments\', 'line_', int2str(segment_number), '_word_', int2str(n), '_', FILE_NAME, FILE_EXTENSION));
            
            overall_segmentation_point(osp) = segmentation_points(spc);
            osp = osp+1;
            overall_segmentation_point(osp) = segmentation_points(spc+1);
            osp = osp+1;
            
            spc = spc+2;
        end
    end
    
line_top = line_top + 2;
line_bottom = line_bottom + 2;

end

handles.number_of_word_segments = NUMBER_OF_WORD_SEGMENTS;
handles.word_segmentation_points = overall_segmentation_point;
set(handles.output_display, 'string', strcat('NUMBER OF WORD SEGMENTS: ', num2str(NUMBER_OF_WORD_SEGMENTS)));
guidata(hObject, handles);

% --- Executes on button press in character_segmentation.
function character_segmentation_Callback(hObject, eventdata, handles)
% hObject    handle to character_segmentation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

line_segmentation_points = handles.line_segmentation_points;
word_segmentation_points = handles.word_segmentation_points;

line_top = 1;
line_bottom = 2;
word_left = 1;
word_right = 2;

total_characters = 0;

FILE_PWD = handles.file_pwd;
FILE_NAME = handles.file_name;
FILE_EXTENSION = handles.file_extension;
NUMBER_OF_LINE_SEGMENTS = handles.number_of_line_segments;
NUMBER_OF_WORD_SEGMENTS = handles.number_of_word_segments;
NUMBER_OF_CHARACTER_SEGMENTS = 0;

hold on;

for segment_number = 1 : NUMBER_OF_LINE_SEGMENTS
    
    for word_segment_number = 1 : NUMBER_OF_WORD_SEGMENTS
    
        input_path = strcat(FILE_PWD, '\segments\', 'line_', int2str(segment_number), '_word_', int2str(word_segment_number), '_', FILE_NAME, FILE_EXTENSION);

        if exist(input_path) == 0
            strcat('line_', int2str(segment_number), '_word_', int2str(word_segment_number), '_', FILE_NAME, FILE_EXTENSION, 'does not exist')
            break;
        else
            input_image = imread(input_path);

            [image_height,image_width] = size(input_image);
            segmentation_points = Character_Segmentation(input_image);

            for w = 1 : length(segmentation_points)
                line([word_segmentation_points(word_left)+segmentation_points(w), word_segmentation_points(word_left)+segmentation_points(w)],[line_segmentation_points(line_top),line_segmentation_points(line_bottom)]);
            end
            
            number_of_char_segments = floor(length(segmentation_points)/2)
            NUMBER_OF_CHARACTER_SEGMENTS = NUMBER_OF_CHARACTER_SEGMENTS + number_of_char_segments;

            spc = 1;
            for n = 1 : number_of_char_segments;
                z = input_image(: , segmentation_points(spc): segmentation_points(spc+1));
                imwrite(z, strcat(FILE_PWD, '\segments\', 'line_', int2str(segment_number), '_word_', int2str(word_segment_number), '_char_', int2str(n), '_', FILE_NAME, FILE_EXTENSION));
                spc = spc+2;
            end
        
        end
                
        segmentation_points
        
        word_left = word_left+2;
    end
    
line_top = line_top + 2;
line_bottom = line_bottom + 2;

end

hold off;
number_of_char_segments = NUMBER_OF_CHARACTER_SEGMENTS;
handles.number_of_char_segments = number_of_char_segments;
handles.character_segmentation_points = segmentation_points;
set(handles.output_display, 'string', strcat('NUMBER OF CHARACTER SEGMENTS: ', num2str(number_of_char_segments)));
guidata(hObject, handles);

% --- Executes on button press in euler_number.
function euler_number_Callback(hObject, eventdata, handles)
% hObject    handle to euler_number (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

for line_segment_number = 1 : handles.number_of_line_segments
    for word_segment_number = 1 : handles.number_of_word_segments
        for char_segment_number = 1 : handles.number_of_char_segments
            input_image = imread(strcat(handles.file_pwd, '\segments\', 'line_', int2str(line_segment_number), '_word_', int2str(word_segment_number), '_char_', int2str(char_segment_number), '_', handles.file_name, handles.file_extension));
            
            character_segment = imresize(input_image, [90 60]);
            
%             YY = imdilate(input_image, strel('disk', 2,6));
%             size(YY)
%            
%             euler_character = reshape(ZZ, 1, m*n);
%             size(euler_character);
%             
%             imshow(ZZ);
            
            imshow(character_segment)
            ZZ = (padarray(character_segment, [2 2], 0));
            [n,m] = size(ZZ);
            euler_character = reshape(ZZ, 1, m*n);
            
            cx = 0;
            cc = 0;
            dg = 0;
            z = 0;
            E = 0;
            x = 1;
            i = 1;

            while i <= (m - 1) * (n - 1)
                z = euler_character(x) + euler_character(x+1) + euler_character(x+n) + euler_character(x+n+1);
                if (z==1)
                    cx = cx+1;
                elseif(z == 3)
                    cc = cc+1;
                elseif (z == 2 & ~(euler_character(x) ==  + euler_character(x+1)) & ~(euler_character(x) == euler_character(x+n)))
                    dg = dg+1;
                end
                x = x+1;
                i = i+1;
            end

            if (cx == 0 & cc == 0 & dg == 0)
                output = 'no character';
            else
                E = (cx - cc - 2 * dg) / 4;
                sprintf('cx = %d', cx);
                sprintf('cc = %d', cc);
                sprintf('dg = %d', dg);
                sprintf('Euler Number = %d', E)

                if(E == 1)
                     output = 'CLASS: NO holes';
                elseif(E == 0)
                     output = 'CLASS: ONE hole';
                elseif(E == -1)
                     output = 'CLASS: TWO holes';
                elseif(E == -2)
                     output = 'CLASS: THREE holes';
                elseif (E <= -3)
                    output = 'CLASS: MANY holes';
                end
            end

            set(handles.output_display, 'string', output);
        end
    end
end

% --- Executes on button press in diagonal_feature_extraction.
function diagonal_feature_extraction_Callback(hObject, eventdata, handles)
% hObject    handle to diagonal_feature_extraction (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
           
            input_image = getimage(); 
            m = 90;
            n = 60;
            input_image = imresize(input_image, [m n]);
            
            imshow(input_image);
   
            zone_number = 1;
            y = 1;

            current_row = 1;
            while y <= 9 
                x = 1;
                current_column = 1;
                while x <= 6
                    zone(:,:,zone_number) = input_image(current_row:current_row+9,current_column:current_column+9);
                    x = x+1;
                    current_column = current_column+10;
                    zone_number = zone_number+1;
                end
                y = y+1;
                current_row = current_row+10;
            end

            row = 1;
            zone_number = 1;
            while row <= 9
                column = 1;
                while column <= 6
                sub_feature(row,column) = sum(sum(zone(:,:,zone_number)))/19;    
                zone_number = zone_number+1;
                column = column+1;
                end
                row = row+1;
            end

            column = 1;
            while column <= 6
                vertical_feature(column) = sum(sub_feature(:,column))/9;
                column = column+1;
            end

            row = 1;
            while row <= 9
                horizontal_feature(row) = sum(sub_feature(row,:))/6;
                row = row+1;
            end

            A = [reshape(sub_feature,1,54), vertical_feature, horizontal_feature]
            set(handles.output_display, 'string', A);
            
            handles.features = A;
            guidata(hObject, handles);
            
            %create DBo69FE.mat in workspace
            %right-sclick file save as..
            %DO NOT CHANGE THE DIRECTORY!!!
            %done
            
            %ORIGINAL
            %B=A;
            %load('Database.mat','A');
            %A=[A;B];
            %A
            %save('Database.mat','A','-append');
            
            %TRIAL
            %B=A;
            %save('Sample.mat','B','-append');
        
            

            %ANN PLAN
            
            %Input "Database.mat" "A" - Training/Test Data (69 Features)
            %Target "Output.mat"** - Training/Answer Data (Letter A=1...)
            %Sample "ClassfyData.mat"** "B"- Test Data (To be Classified)
            %Output "Answer.mat"** - Output (1=A...)
            
            %To Do:
            %Create .mat files





% --- Executes on button press in Classification.
function Classification_Callback(hObject, eventdata, handles)
% hObject    handle to Classification (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
    
    
    net=fitnet(69,'trainlm');
    net.divideParam.trainRatio=1;
    net.divideParam.valRatio=0;
    net.divideParam.testRatio=0;
    
    A =  load('Database.mat','A');
    AnsKey = load('Output.mat','AnsKey') ;
    
    Feature_Database = A.A;
    Output = AnsKey.AnsKey;
    
    [net,pr]=train(net,Feature_Database',Output');

    classification = char(net(handles.features') + 64);

    set(handles.output_display, 'string', classification);
            



